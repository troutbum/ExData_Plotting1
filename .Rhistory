makeCacheMatrix <- function(x = matrix()) {
invCached <- matrix(data = NA, nrow = 1,                # set cached inverse matrix to "empty"
ncol = 1, byrow = FALSE,
dimnames = NULL)
set <- function(y) {                                    # method to store data matrix
x <<- y
invCached <<- matrix(NA, 1, 1, FALSE, NULL)     # reset cached inverse to "empty"
}
get <- function() x                                     # method to retrieve data matrix
setInverse <- function(inverse) invCached <<- inverse   # method to store mean
getInverse <- function() invCached                      # method to retrieve mean
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()               # retrieve cached inverse
if(!is.na(inverse[1,1])) {              # if not empty, return cached inverse
message("getting cached
inverse matrix")
return(inverse)                 # use invisible(inverse) to suppress print()
}
data <- x$get()                         # otherwise get cached data
inverse <- solve(data, ...)             # calculate the inverse
x$setInverse(inverse)                   # save the inverse into cache
inverse
}
size <- 10                                      # create data (square matrix)
mydata <- matrix(rnorm(size*size), size, size)
M1 <- makeCacheMatrix()                         # create caching data structure
M1
environment(M1)
M1$set(mydata)                                  # place data into structure
M1$getInverse()                                 # get inverse (empty at this point)
imat <- cacheSolve(M1)                          # calculate the inverse
imat_cached <- cacheSolve(M1)                   # caculate the inverse again (retrieved cached value)
identical(imat, imat_cached)                    # verify inverse and cached inversed are the same
test <- mydata %*% imat                         # verify matrix %*% inverse = identity matrix
View(test)
## R Programming - April 2014
## Programming Assignment 2 - Caching the Inverse of a Matrix
##
# In this example we introduce the <<- operator which can be used to assign a
# value to an object in an environment that is different from the current
# environment.
# Below are two functions that are used to create a special object
# that stores a matrix and cache's its inverse.
#
# The first function, makeVector creates a special "vector", which is really a
# list containing a function to:
# - set the matrix
# - get matrix
# - set matrix inverse
# - get matrix inverse
makeCacheMatrix <- function(x = matrix()) {
invCached <- matrix(data = NA, nrow = 1,                # set cached inverse matrix to "empty"
ncol = 1, byrow = FALSE,
dimnames = NULL)
set <- function(y) {                                    # method to store data matrix
x <<- y
invCached <<- matrix(NA, 1, 1, FALSE, NULL)     # reset cached inverse to "empty"
}
get <- function() x                                     # method to retrieve data matrix
setInverse <- function(inverse) invCached <<- inverse   # method to store mean
getInverse <- function() invCached                      # method to retrieve mean
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
# The second function calculates the inverse of the object. It checks to see if the inverse
# has already been calculated. Ff not, it calculates the inverse and stores it
# in the object.  Returns a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
inverse <- x$getInverse()               # retrieve cached inverse
if(!is.na(inverse[1,1])) {              # if not empty, return cached inverse
message("getting cached inverse matrix")
return(inverse)                 # use invisible(inverse) to suppress print()
}
data <- x$get()                         # otherwise get cached data
inverse <- solve(data, ...)             # calculate the inverse
x$setInverse(inverse)                   # save the inverse into cache
inverse
}
# Now use these functions to generate an inverse matrix and cache it. Verify that
# the calculated and cached inverses are identical Verify that the matrix
# multiplied by its inverse is equal to the identity matrix
size <- 10                                       # create test data (square matrix)
mydata <- matrix(rnorm(size*size), size, size)
mat <- makeCacheMatrix()                         # create caching data structure
mat
mat$set(mydata)                                  # place data into structure
mat$getInverse()                                 # get inverse (empty at this point)
imat <- cacheSolve(mat)                          # calculate the inverse
imat_cached <- cacheSolve(mat)                   # caculate the inverse again (retrieved cached value)
identical(imat, imat_cached)                     # verify inverse and cached inversed are the same
test <- mydata %*% imat                          # verify matrix %*% inverse = identity matrix
View(test)
Food_Display_Table <- read.table("~/Downloads/MyFoodapediaData/Food_Display_Table.xml", quote="\"")
View(Food_Display_Table)
Inpatient_Prospective_Payment_System__IPPS__Provider_Summary_for_the_Top_100_Diagnosis.Related_Groups__DRG_ <- read.csv("~/Downloads/Inpatient_Prospective_Payment_System__IPPS__Provider_Summary_for_the_Top_100_Diagnosis-Related_Groups__DRG_.csv")
View(Inpatient_Prospective_Payment_System__IPPS__Provider_Summary_for_the_Top_100_Diagnosis.Related_Groups__DRG_)
R.Version()
install.packages("xlsx")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = "./data/NGAP.xlsx", method ="curl")
library(xlsx)
rowIndex <- 18:23
colIndex <- 7:15
dat <- read.xlsx("./data/NGAP.xlsx,sheetIndex=1,colIndex=colIndex,rowIndex=rowIndex")
?read.xlsx
?xlsx
dat <- read.xlsx("./data/NGAP.xlsx, sheetIndex=0 ,colIndex=colIndex, rowIndex=rowIndex")
dat <- read.xlsx("./data/NGAP.xlsx, sheetIndex=1 ,colIndex=colIndex, rowIndex=rowIndex")
install.packages("RMySQL")
install.packages(c("MASS", "swirl"))
install.packages("RMySQL")
setwd("~/CourseraHW/ExData_Plotting1")
# Exploratory Data Analysis
# June 2014
# Course Project 1
# Plot 1
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
# download file if it isn't already there
filePath <- "./data/"
fileZipName <- "exdata-data-household_power_consumption.zip"
fileName <- "household_power_consumption.txt"
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
ZipFile <- paste0(filePath, fileZipName)        # path to zipped data file
xFile <- paste0(filePath, fileName)             # path to unzipped data file
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = ZipFile, method ="curl")
unzip(ZipFile, exdir=filePath)
dateDownloaded <- date()
}
# sample data file to determine classes
sampleData <- read.csv(xFile, stringsAsFactors=FALSE,sep=";",na.strings="?", nrows = 5)
classes <- sapply(sampleData, class)
classes
# read all data and convert Date column from char
all_data <- read.csv(xFile, stringsAsFactors=FALSE,sep=";",na.strings="?", colClasses = classes)
# subset data
data <- subset(all_data, Date == "1/2/2007" | Date == "2/2/2007")
# plot to PNG file
library(datasets)
png("plot1.png", width = 480, height = 480)
hist(data$Global_active_power, xlab = "Global Active Power (kilowatts)",
col="red", bg="white", main = "Global Active Power")
dev.off()
# Exploratory Data Analysis
# June 2014
# Course Project 1
# Plot 1
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
# download file if it isn't already there
filePath <- "./data/"
fileZipName <- "exdata-data-household_power_consumption.zip"
fileName <- "household_power_consumption.txt"
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
ZipFile <- paste0(filePath, fileZipName)        # path to zipped data file
xFile <- paste0(filePath, fileName)             # path to unzipped data file
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = ZipFile, method ="curl")
unzip(ZipFile, exdir=filePath)
dateDownloaded <- date()
}
# sample data file to determine classes
sampleData <- read.csv(xFile, stringsAsFactors=FALSE,sep=";",na.strings="?", nrows = 5)
classes <- sapply(sampleData, class)
classes
# read all data and convert Date column from char
all_data <- read.csv(xFile, stringsAsFactors=FALSE,sep=";",na.strings="?", colClasses = classes)
# subset data
data <- subset(all_data, Date == "1/2/2007" | Date == "2/2/2007")
# plot to PNG file
library(datasets)
png("plot1.png", width = 480, height = 480)
hist(data$Global_active_power, xlab = "Global Active Power (kilowatts)",
col="red", bg="white", main = "Global Active Power")
dev.off()
View(data)
install.packages("lubridate")
install.packages("ggplot2")
install.packages("lattice")
str(date)
str(data)
setwd("~/CourseraHW/ExData_Plotting1")
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
# download file if it isn't already there
filePath <- "./data/"
fileZipName <- "exdata-data-household_power_consumption.zip"
fileName <- "household_power_consumption.txt"
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
ZipFile <- paste0(filePath, fileZipName)        # path to zipped data file
xFile <- paste0(filePath, fileName)             # path to unzipped data file
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = ZipFile, method ="curl")
unzip(ZipFile, exdir=filePath)
dateDownloaded <- date()
}
# sample data file to determine classes
sampleData <- read.csv(xFile, stringsAsFactors=FALSE,sep=";",na.strings="?", nrows = 5)
classes <- sapply(sampleData, class)
classes
# read all data and convert Date column from char
all_data <- read.csv(xFile, stringsAsFactors=FALSE,sep=";",na.strings="?", colClasses = classes)
# subset data
data <- subset(all_data, Date == "1/2/2007" | Date == "2/2/2007")
library(lubridate)
data2 <- dmy(data, data$Date)
View(data)
bad <-is.na(data)
bad
str(bad)
summary(bad)
data2 <- data
data2$Date <- dmy(data2, data$Date)
?dmy
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
# download file if it isn't already there
filePath <- "./data/"
fileZipName <- "exdata-data-household_power_consumption.zip"
fileName <- "household_power_consumption.txt"
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
ZipFile <- paste0(filePath, fileZipName)        # path to zipped data file
xFile <- paste0(filePath, fileName)             # path to unzipped data file
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = ZipFile, method ="curl")
unzip(ZipFile, exdir=filePath)
dateDownloaded <- date()
}
# sample data file to determine classes
sampleData <- read.csv(xFile, stringsAsFactors=FALSE,sep=";",na.strings="?", nrows = 5)
classes <- sapply(sampleData, class)
classes
# read all data and convert Date column from char
all_data <- read.csv(xFile, stringsAsFactors=FALSE,sep=";",na.strings="?", colClasses = classes)
# subset data
data <- subset(all_data, Date == "1/2/2007" | Date == "2/2/2007")
library(lubridate)
data2 <- data
identical(data,data2)
summary(data2)
str(data2)
data2$Date <- dmy(data2, data$Date)
View(data)
View(data2)
data2$Date <- dmy(data2, data2$Date)
# plot to PNG file
data2 <- data
data2$Date <- dmy(data2, data2$Date)
data$Date <- dmy(data, data$Date)
View(data)
str(data)
# Exploratory Data Analysis
# June 2014
# Course Project 1
# Plot 2
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
# download file if it isn't already there
filePath <- "./data/"
fileZipName <- "exdata-data-household_power_consumption.zip"
fileName <- "household_power_consumption.txt"
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
ZipFile <- paste0(filePath, fileZipName)        # path to zipped data file
xFile <- paste0(filePath, fileName)             # path to unzipped data file
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = ZipFile, method ="curl")
unzip(ZipFile, exdir=filePath)
dateDownloaded <- date()
}
# sample data file to determine classes
sampleData <- read.csv(xFile, stringsAsFactors=FALSE,sep=";",na.strings="?", nrows = 5)
classes <- sapply(sampleData, class)
classes
# read all data and convert Date column from char
all_data <- read.csv(xFile, stringsAsFactors=FALSE,sep=";",na.strings="?", colClasses = classes)
# subset data
data <- subset(all_data, Date == "1/2/2007" | Date == "2/2/2007")
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
View(data)
str(data)
?dayofweek
?dayOfWeek
?weekday
?weekdays
weekdays(data$Date[1])
thursdays <- subset(data, weekdays(data$Date) == "Thursday")
View(thursdays)
weekdays(2007-02-01)
weekdays("2007-02-01")
thursdays <- subset(all_data, weekdays(data$Date) == "Thursday")
View(thursdays)
all_data$Date <- as.Date(all_data$Date, format="%d/%m/%Y")
thursdays <- subset(all_data, weekdays(all_data$Date) == "Thursday")
View(thursdays)
?ISOdatetime
View(data)
dt <- paste(date$Date[1],data$Time[1])
dt <- paste(as.char(date$Date[1]),data$Time[1])
dt <- paste(as.character(date$Date[1]),data$Time[1])
?as.character
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
# download file if it isn't already there
filePath <- "./data/"
fileZipName <- "exdata-data-household_power_consumption.zip"
fileName <- "household_power_consumption.txt"
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
ZipFile <- paste0(filePath, fileZipName)        # path to zipped data file
xFile <- paste0(filePath, fileName)             # path to unzipped data file
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = ZipFile, method ="curl")
unzip(ZipFile, exdir=filePath)
dateDownloaded <- date()
}
# sample data file to determine classes
sampleData <- read.csv(xFile, stringsAsFactors=FALSE,sep=";",na.strings="?", nrows = 5)
classes <- sapply(sampleData, class)
classes
# read all data and convert Date column from char
all_data <- read.csv(xFile, stringsAsFactors=FALSE,sep=";",na.strings="?", colClasses = classes)
# subset data
data <- subset(all_data, Date == "1/2/2007" | Date == "2/2/2007")
View(data)
data$DateTime <- paste(data$Date, data$Time)
View(data)
data$DateTime <- as.Date(data$DateTime, format="%d/%m/%Y %H:%M:%S")
View(data)
?DateTimeClasses
hour(data$DateTime[1])
min(data$DateTime[1])
d <- data$DateTime[1]
d
p <- as.POSIXlt(d)
p$mday
p$mon
p$year + 1900
p$min
p$hour
p$sec
d <- data$DateTime[1000]
p <- as.POSIXlt(d)
d
p
p$sec
p$hour
dates <- c("02/27/92", "02/27/92", "01/14/92", "02/28/92", "02/01/92")
times <- c("23:03:20", "22:29:56", "01:03:30", "18:21:03", "16:56:26")
x <- paste(dates, times)
strptime(x, "%m/%d/%y %H:%M:%S")
y <- strptime(x, "%m/%d/%y %H:%M:%S")
y
y$hour
y[1]$hour
y[2]$hour
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
# download file if it isn't already there
filePath <- "./data/"
fileZipName <- "exdata-data-household_power_consumption.zip"
fileName <- "household_power_consumption.txt"
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
ZipFile <- paste0(filePath, fileZipName)        # path to zipped data file
xFile <- paste0(filePath, fileName)             # path to unzipped data file
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = ZipFile, method ="curl")
unzip(ZipFile, exdir=filePath)
dateDownloaded <- date()
}
# sample data file to determine classes
sampleData <- read.csv(xFile, stringsAsFactors=FALSE,sep=";",na.strings="?", nrows = 5)
classes <- sapply(sampleData, class)
classes
# read all data and convert Date column from char
all_data <- read.csv(xFile, stringsAsFactors=FALSE,sep=";",na.strings="?", colClasses = classes)
# subset data
data <- subset(all_data, Date == "1/2/2007" | Date == "2/2/2007")
data$DateTime <- paste(data$Date, data$Time)
data$DateTime <- strptime(data$DateTime, format="%d/%m/%Y %H:%M:%S")
View(data)
View(all_data)
plot(DateTime, Global_active_power)
plot(data$DateTime, data$Global_active_power)
plot(data$DateTime, data$Global_active_power, ylab = "Global Active Power (kilowatts)")
plot(data$DateTime, data$Global_active_power,
ylab = "Global Active Power (kilowatts)", xlab="")
?plot
plot(data$DateTime, data$Global_active_power, type="l",
ylab = "Global Active Power (kilowatts)", xlab="")
# Exploratory Data Analysis
# June 2014
# Course Project 1
# Plot 2
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
# download file if it isn't already there
filePath <- "./data/"
fileZipName <- "exdata-data-household_power_consumption.zip"
fileName <- "household_power_consumption.txt"
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
ZipFile <- paste0(filePath, fileZipName)        # path to zipped data file
xFile <- paste0(filePath, fileName)             # path to unzipped data file
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = ZipFile, method ="curl")
unzip(ZipFile, exdir=filePath)
dateDownloaded <- date()
}
# sample data file to determine classes
sampleData <- read.csv(xFile, stringsAsFactors=FALSE,sep=";",na.strings="?", nrows = 5)
classes <- sapply(sampleData, class)
classes
# read all data and convert Date column from char
all_data <- read.csv(xFile, stringsAsFactors=FALSE,sep=";",na.strings="?", colClasses = classes)
# subset data
data <- subset(all_data, Date == "1/2/2007" | Date == "2/2/2007")
# create column for DateTime objects converted from character columns
data$DateTime <- paste(data$Date, data$Time)
data$DateTime <- strptime(data$DateTime, format="%d/%m/%Y %H:%M:%S")
# plot to PNG file
library(datasets)
png("plot2.png", width = 480, height = 480)
plot(data$DateTime, data$Global_active_power, type="l",
ylab = "Global Active Power (kilowatts)", xlab="")
dev.off()
